#!/usr/bin/env python3
from subprocess import run
from os.path import join,basename,exists,splitext
from os import getuid,listdir
from argparse import ArgumentParser,Namespace
from typing import List,Dict,Tuple
from time import sleep
from magic import Magic

PRESENTATION:str='presentation'
DOCUMENT:str='document'
SPREADSHEET:str='spreadsheets'
TYPES:Dict[str,str]={'application/vnd.openxmlformats-officedocument.presentationml.presentation':PRESENTATION,
                     'application/vnd.ms-powerpoint':PRESENTATION,
                     'application/vnd.openxmlformats-officedocument.wordprocessingml.document':DOCUMENT,
                     'application/msword':DOCUMENT,
                     'application/vnd.ms-excel':SPREADSHEET,
                     'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':SPREADSHEET,
                     }

def main():
    parser: ArgumentParser = ArgumentParser()
    parser.add_argument('-d', '--debug', help='Starts the program in debug mode', action='store_true', default=False)
    parser.add_argument('file', type=str, help='The file to open on Google Docs', nargs='?')
    args: Namespace = parser.parse_args()

    debug: bool = args.debug
    original_file: str = args.file

    if original_file is None:
        run(['zenity', '--info', "--text=You can't launch this program from the menu", '--title=Error'], check=True)
        exit(1)

    if not exists(original_file):
        run(['zenity', '--info', f"--text=The file {original_file} doesn't exists", '--title=Error'], check=True)
        exit(1)

    mime = Magic(mime=True).from_file(original_file)
    if mime not in TYPES:
        run(['zenity', '--info', f"--text=Unknown mime type: {mime}", '--title=Error'], check=True)
        exit(1)

    if debug:
        print(original_file)

    folder: str = join('/run', 'user', str(getuid()), 'gvfs')
    folders: List[str] = listdir(folder)
    if len(folders) == 0:
        run(['zenity', '--info', "--text=You must mount Google Drive in Nautilus first", '--title=Error'], check=True)
        exit(1)
    folder: str = join(folder, folders[0])

    new_file: str
    if folder not in original_file:
        file_path:str=join(folder, basename(original_file))
        while exists(file_path):
            parts:Tuple[str,str]=splitext(file_path)
            file_path=f'{parts[0]}(1){parts[1]}'
        old_files: List[str] = listdir(folder)
        run(['cp', original_file, file_path], check=True)
        new_files: List[str] = listdir(folder)
        for file in old_files:
            new_files.remove(file)
        new_file = new_files[0]
        sleep(1)
    else:
        new_file = basename(original_file)

    run(['xdg-open', f'https://docs.google.com/{TYPES[mime]}/d/{new_file}/edit'], check=True)

if __name__ == '__main__':
    main()
